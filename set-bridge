#!/bin/bash
#
# Copyright (c) 2011-2022 Fabian Affolter <fabian@affolter-engineering.ch>
# Released under the MIT license.
# 
# This bash script setup a transparent and non-permanent bridge for
# wire-tapping.
#
# Bridge name
BRIDGE_NAME=br0    
# Primary card
INTERFACE_1_NAME=enp0s20f0u1
# Secondary card
INTERFACE_2_NAME=enp0s13f0u2
# Additional card
#INTERFACE_3_NAME=p3p1

bridge_up() {
    # Enable IP forwarding 
    echo "1" > /proc/sys/net/ipv4/ip_forward

    # Disable filtering on the bridge
    echo "0" > /proc/sys/net/bridge/bridge-nf-call-arptables
    echo "0" > /proc/sys/net/bridge/bridge-nf-call-iptables
    echo "0" > /proc/sys/net/bridge/bridge-nf-call-ip6tables

    # Stop and disable NetworkManager
    service NetworkManager stop
    systemctl disable NetworkManager
    iptables -F

    # Start bridge configuration    
    ip link set ${INTERFACE_1_NAME} down
    ip link set ${INTERFACE_2_NAME} down

    # Create a bridge
    ip link add name ${BRIDGE_NAME} type bridge  
    ip address add 0.0.0.0 dev ${BRIDGE_NAME}
    ip link set dev ${BRIDGE_NAME} up

    # Set up interfaces
    ip addr add 0.0.0.0 dev ${INTERFACE_1_NAME}
    ip link set ${INTERFACE_1_NAME} promisc up
    ip addr add 0.0.0.0 dev ${INTERFACE_2_NAME}
    ip link set ${INTERFACE_2_NAME} promisc up
    
    # Add interfaces to bridge
    ip link set ${INTERFACE_1_NAME} master ${BRIDGE_NAME}
    ip link set ${INTERFACE_2_NAME} master ${BRIDGE_NAME}
    
    # ebtables rules
    ebtables -P INPUT DROP
    ebtables -P OUTPUT DROP
    ebtables -P FORWARD DROP
    ebtables -F FORWARD
    ebtables -A FORWARD -p IPv4 -j ACCEPT
    ebtables -A FORWARD -p ARP -j ACCEPT

    echo "Done...Bridge is up."
    echo "---------------------------------------------------------------------"
    bridge link
    exit 1
}

bridge_down() {
    # Delete bridge
    ifconfig $BRIDGE_NAME down
    
    ip link delete ${BRIDGE_NAME} type bridge

    brctl delif $BRIDGE_NAME $INTERFACE_1_NAME
    brctl delif $BRIDGE_NAME $INTERFACE_1_NAME
    brctl delbr $BRIDGE_NAME
    # Bring interfaces down
    ip link set ${INTERFACE_1_NAME} nomaster
    ip link set ${INTERFACE_2_NAME} nomaster
    ip link set ${INTERFACE_1_NAME} down
    ip link set ${INTERFACE_2_NAME} down
    # Restart NetworkManager
    systemctl enable NetworkManager
    service NetworkManager restart
    echo "Done...Bridge is down and NetworkManager is controlling your interfaces."
    exit 1
}

while :
do
cat << EOF

Non-premanent Bridge creator
-------------------------------------------------------------------------------
1. Start Bridge
2. Stop Bridge
9. Quit

EOF

echo -n "Your choice? : "
read INPUT

case $INPUT in
1) bridge_up ;;
2) bridge_down ;;
9) exit ;;
*) echo "\"$INPUT\" is not valid, try again... "; sleep 1 ;;
esac
done

